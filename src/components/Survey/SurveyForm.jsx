import { useState } from 'react';

const TelegramWebApp = window.Telegram.WebApp;

export default function SurveyForm() {
  const [formData, setFormData] = useState({
    name: '',
    recipient: '',
    relationship: '',
    // timeApart: '',
    // lastDayTogether: '',
    // firstWords: '',
    // hardestPart: '',
    // stayingConnected: '',
    // cherishedMoments: '',
    // supportiveWords: '',
    // sourceOfStrength: '',
    // specialThing: '',
    // cherishedThings: '',
    // describeLovedOnes: '',
    // unspokenWords: '',
    // sharedDream: '',
    // reunionMoment: '',
    // emotionalTone: '',
    // musicalStyle: '',
    // essentialWords: '',
    // desiredEmotions: ''
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const botToken = '8151650888:AAFSJqYDHUtrii-7WS8sBDgi0MGtmYosg9k';
      const chatId = TelegramWebApp.initDataUnsafe.user?.id; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!chatId) {
        alert("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à Telegram ID.");
        return;
      }

      const message = `
üìã *–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞*  
üë§ *–ò–º—è:* ${formData.name}  
üéµ *–ö–æ–º—É –ø–µ—Å–Ω—è:* ${formData.recipient}  
‚ù§Ô∏è *–ö—Ç–æ –æ–Ω–∏ –¥–ª—è –≤–∞—Å:* ${formData.relationship}  
      `;

      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: "Markdown"
        })
      });

      const result = await response.json();
      if (result.ok) {
        alert("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!");
        TelegramWebApp.close(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebApp
      } else {
        alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.");
      }

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞:", error);
      alert("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.");
    }
  };

  return (
    <form className="survey-form" onSubmit={handleSubmit}>
      <h2>üîπ –õ–∏—á–Ω–æ—Å—Ç—å –∏ —Å–≤—è–∑—å —Å –±–ª–∏–∑–∫–∏–º–∏</h2>
      <label>1. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</label>
      <input type="text" name="name" value={formData.name} onChange={handleChange} />

      <label>2. –ö–æ–º—É –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —ç—Ç—É –ø–µ—Å–Ω—é?</label>
      <input type="text" name="recipient" value={formData.recipient} onChange={handleChange} />

      <label>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫—Ç–æ —ç—Ç–∏ –ª—é–¥–∏ –¥–ª—è –≤–∞—Å:</label>
      <textarea name="relationship" value={formData.relationship} onChange={handleChange}></textarea>

      {/* <label>3. –ö–∞–∫ –¥–æ–ª–≥–æ –≤—ã –≤ —Ä–∞–∑–ª—É–∫–µ?</label>
      <input type="text" name="timeApart" value={formData.timeApart} onChange={handleChange} /> */}

      <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
    </form>
  );
}
